{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["url_base","App","state","results","searchInput","searchText","replaceInput","getResults","str","limit","url","fetch","then","response","ok","Error","status","json","data","query","search","map","snippet","title","pageid","setState","catch","err","console","log","replaceWith","regex","RegExp","firstIndex","findIndex","result","test","newSnippet","replace","newResults","index","replaceAllWith","handleInputChange","e","target","name","value","handleButtonClick","prevState","this","Results","key","dangerouslySetInnerHTML","__html","className","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b9cf4f4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst url_base = \"https://en.wikipedia.org/w/api.php?action=query&list=search&format=json\";\n\nclass App extends Component {\n  state = {\n    results: [],\n    searchInput: \"\",\n    searchText: \"\",\n    replaceInput: \"\"\n  };\n\n  getResults = (str, limit = 10) => {\n    var url = `${url_base}&srsearch=\"${str}\"&srlimit=${limit}&origin=*`;\n\n    fetch(url)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw new Error(response.status);\n      })\n      .then(response => response.json())\n      .then(data => {\n        // console.log(data.query.search);\n\n        var results = data.query.search.map(({ snippet, title, pageid }) => ({ snippet, title, pageid }));\n\n        this.setState({ results });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  replaceWith = str => {\n    // console.log(this.state.searchText, \"i\");\n    var regex = RegExp(this.state.searchText, \"i\");\n    var firstIndex = this.state.results.findIndex(result => {\n      return regex.test(result.snippet);\n    });\n    // console.log(firstIndex);\n    if (firstIndex !== -1) {\n      var newSnippet = this.state.results[firstIndex].snippet.replace(regex, str);\n      console.log(newSnippet);\n\n      var newResults = this.state.results.map((result, index) => {\n        if (index === firstIndex) {\n          result.snippet = newSnippet;\n        }\n        return result;\n      });\n\n      this.setState({ results: newResults });\n    }\n  };\n\n  replaceAllWith = str => {\n    var regex = RegExp(this.state.searchText, \"ig\");\n\n    var newResults = this.state.results.map((result, index) => {\n      // if (index === firstIndex) {\n      //   result.snippet = newSnippet;\n      // }\n      result.snippet = result.snippet.replace(regex, str);\n\n      return result;\n    });\n\n    this.setState({ results: newResults });\n  };\n\n  handleInputChange = e => {\n    // console.log(e.target.name);\n    // console.log(e.target.value);\n\n    //e.target.value !== \"\"\n    if (true) {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    }\n  };\n\n  handleButtonClick = e => {\n    var buttonName = e.target.name;\n    switch (buttonName) {\n      case \"searchBtn\":\n        // console.log(\"search button clicked\");\n        this.getResults(this.state.searchInput);\n        this.setState(prevState => {\n          return {\n            searchText: prevState.searchInput\n            // searchInput: \"\"\n          };\n        });\n\n        break;\n      case \"replaceBtn\":\n        // console.log(\"replace button clicked\");\n        this.replaceWith(this.state.replaceInput);\n        break;\n      case \"replaceAllBtn\":\n        // console.log(\"replaceAll button clicked\");\n        this.replaceAllWith(this.state.replaceInput);\n        break;\n      default:\n        console.log(\"unknown button clicked\");\n        break;\n    }\n  };\n\n  render() {\n    var { searchText, searchInput, replaceInput, results } = this.state;\n    var Results = results.map(({ snippet, title, pageid }) => {\n      // return <li key={pageid}>{snippet}</li>;\n      return <li key={pageid} dangerouslySetInnerHTML={{ __html: snippet }}></li>;\n    });\n    return (\n      <div className=\"wrapper\">\n        <div className=\"inputWrapper\">\n          <span>Search:</span>\n          <input type=\"text\" name=\"searchInput\" onChange={this.handleInputChange} value={searchInput} />\n          <button name=\"searchBtn\" onClick={this.handleButtonClick}>\n            Search\n          </button>\n        </div>\n        <div className=\"inputWrapper\">\n          <span>Replace with:</span>\n          <input type=\"text\" name=\"replaceInput\" onChange={this.handleInputChange} value={replaceInput} />\n          <button name=\"replaceBtn\" onClick={this.handleButtonClick}>\n            Replace\n          </button>\n          <button name=\"replaceAllBtn\" onClick={this.handleButtonClick}>\n            Replace All\n          </button>\n        </div>\n\n        <h2>\n          Search results for: <em>{searchText}</em>\n        </h2>\n\n        <ul className=\"listWrapper\">{Results}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}